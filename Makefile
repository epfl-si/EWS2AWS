SHELL := /bin/bash
SITES_LIST=www www__about www__education www__research www__innovation www2018

ENV_FILE := .env
include_env := $(wildcard $(ENV_FILE))
ifneq ($(include_env),)
	include .env
endif

AWS_REGION=eu-central-2
AWS_EC2_IMAGE_ID=ami-0012c4a50d44fc78a
AWS_EC2_INSTANCE_TYPE=t3.micro
AWS_EC2_KEY_NAME=epflWP
AWS_EC2_SECURITY_GROUP_IDS=sg-0f49502b10d5c3ec0 sg-03c3d5996d33bbff0
AWS_EC2_SUBNET_ID=subnet-0b627edec6cc82546

#TODO: get the IP dynamically
EC2_PUBLIC_IP=16.62.62.152

RESTOR_PATH=./restore

.PHONY: help
# Print this help (see <https://gist.github.com/klmr/575726c7e05d8780505a> for explanation)
help:
	@echo "$$(tput bold)Available rules (alphabetical order):$$(tput sgr0)";sed -ne"/^## /{h;s/.*//;:d" -e"H;n;s/^## //;td" -e"s/:.*//;G;s/\\n## /---/;s/\\n/ /g;p;}" ${MAKEFILE_LIST}|LC_ALL='C' sort -f |awk -F --- -v n=$$(tput cols) -v i=20 -v a="$$(tput setaf 6)" -v z="$$(tput sgr0)" '{printf"%s%*s%s ",a,-i,$$1,z;m=split($$2,w," ");l=n-i;for(j=1;j<=m;j++){l-=length(w[j])+1;if(l<= 0){l=n-i-length(w[j])-1;printf"\n%*s ",-i," ";}printf"%s ",w[j];}printf"\n";}'

-include .restic
export
.restic:
	@echo "# Auto-generated by Makefile, DO NOT EDIT" > $@
	@echo RESTIC_AWS_SECRET_ACCESS_KEY = $$(cat /keybase/team/epfl_wp_prod/aws-cli-credentials | grep -A4 '\[backup-wwp\]' | grep aws_secret_access_key | sed 's/aws_secret_access_key = //') >> $@
	@echo RESTIC_AWS_ACCESS_KEY_ID = $$(cat /keybase/team/epfl_wp_prod/aws-cli-credentials | grep -A3 '\[backup-wwp\]' | grep aws_access_key_id | sed 's/aws_access_key_id = //') >> $@
	@echo RESTIC_PASSWORD = $$(cat /keybase/team/epfl_wp_prod/aws-cli-credentials | grep -A4 '\[backup-wwp\]' | grep restic_password | sed 's/restic_password = //') >> $@
	@echo RESTIC_BUCKET_NAME = $$(cat /keybase/team/epfl_wp_prod/aws-cli-credentials | grep -A4 '\[backup-wwp\]' | grep bucket_name | sed 's/bucket_name = //') >> $@

# https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/run-instances.html
## Create the Amazon Elastic Compute Cloud (EC2) instance
create_EC2: _run-instances
	@echo "Creating an EC2 instance"
	@INSTANCE_ID=$(shell cat CREATE_INSTANCE_OUTPUT.json | jq -r '.Instances[].InstanceId'); \
	if [ -n "$${INSTANCE_ID}" ]; then \
		echo "Instance $${INSTANCE_ID} have been created."; \
		echo INSTANCE_ID=$${INSTANCE_ID} >> .env; \
	else \
		echo "Instance not created, something is wrong!"; \
	fi;

_run-instances:
	@aws ec2 run-instances \
	 --region ${AWS_REGION} \
	 --image-id ${AWS_EC2_IMAGE_ID} \
	 --count 1 \
	 --instance-type ${AWS_EC2_INSTANCE_TYPE} \
     --key-name ${AWS_EC2_KEY_NAME} \
     --security-group-ids ${AWS_EC2_SECURITY_GROUP_IDS} \
     --subnet-id ${AWS_EC2_SUBNET_ID} \
     --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value="EWS2AWSv1"}]' \
     --user-data file://Prerequis_installation.txt \
     --output json \
     --no-cli-pager \
    > CREATE_INSTANCE_OUTPUT.json

# https://docs.aws.amazon.com/cli/latest/reference/ec2/terminate-instances.html
## Terminate instance based on the .env
delete_EC2: _terminate-instances
	ifndef INSTANCE_ID
		@echo "INSTANCE_ID environment variable missing"
		exit 1
	endif
	@CURRENT=$(shell cat DELETE_INSTANCE_OUTPUT.json | jq -r '.TerminatingInstances[].CurrentState.Name'); \
	PREVIOUS=$(shell cat DELETE_INSTANCE_OUTPUT.json | jq -r '.TerminatingInstances[].PreviousState.Name'); \
	echo "Running status current: $${CURRENT} vs previous: $${PREVIOUS}"; \
	read -p 'Voulez-vous supprimer la ligne dans le .env ? [y/N]' ans; \
	ans=$${ans:-N}; \
	if [ $${ans} = y ] || [ $${ans} = Y ]; then \
		grep -v "$(INSTANCE_ID)" .env > temp && mv temp .env; \
		echo "L'identifiant de l'instance n'est plus dans le fichier .env" ; \
	fi

_terminate-instances:
	@aws ec2 terminate-instances \
		--output json \
		--no-cli-pager \
		--instance-ids $(INSTANCE_ID) \
		> DELETE_INSTANCE_OUTPUT.json
# https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/allocate-address.html
## Allocates an Elastic IP address to Amazon Web Services account
create_static_IP:
	$(eval allocation-id := $(shell aws ec2 allocate-address \
		--region eu-central-2 \
		--domain vpc-0d8ad0bf75015308c | awk '/allocation-id/{print $2}') | sed 's/allocation-id: \([^,]*\),/\1/')
	@echo ALLOCATION_ID=$(allocation-id) >> .env
	@echo L'instance est crÃ©e avec l'id $(ALLOCATION_ID)

# https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/associate-address.html
## Associates an Elastic IP address with our instance
associate_static_IP:
	@echo "Link EC2 instance with static IP $(INSTANCE_ID) $(ALLOCATION_ID)"
	@aws ec2 associate-address \
		--region eu-central-2 \
		--instance-id $(INSTANCE_ID) \
		--allocation-id $(ALLOCATION_ID) \
		--output json \
		--no-cli-pager

# https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/create-db-instance.html
## Creates a Amazon Relational Database Service (RDS) instance
create_DB:
	@echo "Creating an RDS instance"
	$(eval mariadb_password=$(shell openssl rand -base64 12))
	echo MARIADB_PASSWORD=$(mariadb_password) >> .env  
	aws rds create-db-instance \
		--db-instance-identifier dbEWS2AWS \
		--db-instance-class db.t3.micro \
		--engine MariaDB \
		--master-username admin \
		--master-user-password $(mariadb_password) \
		--region eu-central-2 \
		--vpc-security-group-ids sg-0f49502b10d5c3ec0 sg-05f915ac5b05eae54 \
		--allocated-storage 20 \
		--output json \
		--no-cli-pager \
		> CREATE_RDS_OUTPUT.json
	@echo "Instance RDS have been created.";

## Download each latest "files" and "sql" backups of $SITES_LIST from S3 locally
download_from_restic:
	# You have to be in the EPFL network (either on site or with VPN).
	# You have to have the keybase filesystem mounted and access to /keybase/team/epfl_wp_prod
	export AWS_SECRET_ACCESS_KEY=${RESTIC_AWS_SECRET_ACCESS_KEY}; \
	export AWS_ACCESS_KEY_ID=${RESTIC_AWS_ACCESS_KEY_ID}; \
	export RESTIC_PASSWORD=${RESTIC_PASSWORD}; \
	export BUCKET_NAME=${RESTIC_BUCKET_NAME}; \
	mkdir -p ${RESTOR_PATH}; \
	for i in ${SITES_LIST}; do \
		echo "Attempt to restore $${i} in ${RESTOR_PATH}/sites/$${i}. It might take a while..."; \
		mkdir -p ${RESTOR_PATH}/{sites,sql}/$${i}; \
		restic -r s3:https://s3.epfl.ch/$${BUCKET_NAME}/backup/wordpresses/$${i}/files restore latest --target ${RESTOR_PATH}/sites/$${i}; \
		restic -r s3:https://s3.epfl.ch/$${BUCKET_NAME}/backup/wordpresses/$${i}/sql restore latest --target ${RESTOR_PATH}/sql/$${i}; \
		rm -rf ${RESTOR_PATH}/sites/$${i}/wp-content/plugins/epfl-menus \
		echo "---"; \
	done

## Change DB HOST, DB Password 
update_wpconfig:
	echo "update wpconfig";
	@for i in ${SITES_LIST}; do \
		echo "Changing wp-config.php in ${RESTOR_PATH}/sites/$${i}/wp-config.php..."; \
		cd ${RESTOR_PATH}/sites/$${i}/; \
		sed -i'.bak' 's@/srv/www/www.epfl.ch/htdocs@/var/www/aws.fsd.team@g' wp-config.php; \
		sed -i'.bak' 's@/srv/sandbox/www2018.epfl.ch/htdocs@/var/www/www2018.epfl.ch@g' wp-config.php; \
		sed -i'.bak' 's@db-wwp.epfl.ch@dbews2aws.czkaoeksq1g8.eu-central-2.rds.amazonaws.com@g' wp-config.php; \
		cd ../../..; \
	done


update_htaccess:
	# search and remplace https:// URL
	echo "update .htaccess";
	@for i in ${SITES_LIST}; do \
		echo "Changing .htaccess in ${RESTOR_PATH}/sites/$${i}/.htaccess..."; \
		cd ${RESTOR_PATH}/sites/$${i}/; \
		sed -i'.bak' 's@https://www.epfl.ch@https://aws.fsd.team@g' .htaccess; \
		cd ../../..; \
	done

update_sql_dump:
	# search and remplace h/https:// URL
	echo "update SQL dumps";
	@for i in ${SITES_LIST}; do \
		echo "Changing db-backup.sql in ${RESTOR_PATH}/sql/$${i}/db-backup.sql..."; \
		cd ${RESTOR_PATH}/sql/$${i}/; \
		sed -i'.bak' 's@https://www.epfl.ch@https://aws.fsd.team@g' db-backup.sql; \
		cd ../../..; \
	done

copy_wp_from_wp-dev:
	@if [ -n "$$(docker ps --filter name=wp-mgmt -q)" ]; then \
		echo "OK"; \
		docker cp wp-mgmt:/wp ${RESTOR_PATH}/wp; \
		echo "Remove WP version 5..."; \
		rm -rf ${RESTOR_PATH}/wp/5*; \
		echo "Remove /wp/wp"; \
		rm -rf ${RESTOR_PATH}/wp/wp/; \
	else \
		echo "Container wp-mgmt not found!"; \
		echo "Please run 'make up' in wp-dev."; \
		echo "https://github.com/epfl-si/wp-dev/"; \
	fi;

## Restore the local copy of the file to the remove EC2 instance
copy_files: #copy_wp_from_wp-dev
	echo "Copying 'wp' directory to EC2";
	rsync -av --progress ${RESTOR_PATH}/wp ubuntu@aws.fsd.team:/
	echo "Copying 'www2018' directory to EC2";
	rsync -av --progress ${RESTOR_PATH}/sites/www2018/ ubuntu@aws.fsd.team:/var/www/www2018.epfl.ch
	rsync -av --progress ${RESTOR_PATH}/sites/www/ ubuntu@aws.fsd.team:/var/www/aws.fsd.team
	mv ${RESTOR_PATH}/sites/www__about/ ${RESTOR_PATH}/sites/about/
	rsync -av --progress ${RESTOR_PATH}/sites/about ubuntu@aws.fsd.team:/var/www/aws.fsd.team
	mv ${RESTOR_PATH}/sites/www__education/ ${RESTOR_PATH}/sites/education/
	rsync -av --progress ${RESTOR_PATH}/sites/education ubuntu@aws.fsd.team:/var/www/aws.fsd.team
	mv ${RESTOR_PATH}/sites/www__innovation/ ${RESTOR_PATH}/sites/innovation/
	rsync -av --progress ${RESTOR_PATH}/sites/innovation ubuntu@aws.fsd.team:/var/www/aws.fsd.team
	mv ${RESTOR_PATH}/sites/www__research/ ${RESTOR_PATH}/sites/research/
	rsync -av --progress ${RESTOR_PATH}/sites/research ubuntu@aws.fsd.team:/var/www/aws.fsd.team



## Create the relevant DBs and users 
create_db_users:
	# SSH + mysql commands
	echo "Create DBs and users";
	@for i in ${SITES_LIST}; do \
		cd ${RESTOR_PATH}/sites/$${i}/; \
		db_name=$$(grep "DB_NAME" wp-config.php | sed "s/.*'\([^']*\)'.*/\1/"); \
		db_user=$$(grep "DB_USER" wp-config.php | sed "s/.*'\([^']*\)'.*/\1/"); \
		db_password=$$(grep "DB_PASSWORD" wp-config.php | sed "s/.*'\([^']*\)'.*/\1/"); \
		ssh ubuntu@aws.fsd.team "mysql -u admin -p12345678 -h dbews2aws.czkaoeksq1g8.eu-central-2.rds.amazonaws.com -e \"CREATE DATABASE $$db_name;CREATE USER '$$db_user'@'%' IDENTIFIED BY '$$db_password';GRANT ALL PRIVILEGES ON $$db_name.* TO '$$db_user'@'%';\""; \
		rsync -av --progress ../../sql/$${i}/ ubuntu@aws.fsd.team:/home/ubuntu/sql/$${i}; \
		cd ../../..; \
		echo "DB and user create for $${i}"; \
	done

## import sql files to db 
import_db:
	# SSH + mysql commands
	echo "Import DBs";
	for i in ${SITES_LIST}; do \
		db_name=$$(grep "DB_NAME" ${RESTOR_PATH}/sites/$${i}/wp-config.php | sed "s/.*'\([^']*\)'.*/\1/"); \
		ssh ubuntu@aws.fsd.team "mysql -u admin -p12345678 -h dbews2aws.czkaoeksq1g8.eu-central-2.rds.amazonaws.com $$db_name < /home/ubuntu/sql/$${i}/db-backup.sql"; \
		echo "Import DBs for $${i}"; \
	done

.PHONY: clean
clean:
	rm -f .restic.vars {CREATE,DELETE}_INSTANCE_OUTPUT.json
