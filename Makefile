SHELL := /bin/bash
SITES_LIST=www www__about www__education www__research www__innovation www2018

include .env

AWS_REGION=eu-central-2
AWS_EC2_IMAGE_ID=ami-0012c4a50d44fc78a
AWS_EC2_INSTANCE_TYPE=t3.micro
AWS_EC2_KEY_NAME=epflWP
AWS_EC2_SECURITY_GROUP_IDS=sg-0f49502b10d5c3ec0 sg-03c3d5996d33bbff0
AWS_EC2_SUBNET_ID=subnet-0b627edec6cc82546

RESTOR_PATH=./restore

.PHONY: help
# Print this help (see <https://gist.github.com/klmr/575726c7e05d8780505a> for explanation)
help:
	@echo "$$(tput bold)Available rules (alphabetical order):$$(tput sgr0)";sed -ne"/^## /{h;s/.*//;:d" -e"H;n;s/^## //;td" -e"s/:.*//;G;s/\\n## /---/;s/\\n/ /g;p;}" ${MAKEFILE_LIST}|LC_ALL='C' sort -f |awk -F --- -v n=$$(tput cols) -v i=20 -v a="$$(tput setaf 6)" -v z="$$(tput sgr0)" '{printf"%s%*s%s ",a,-i,$$1,z;m=split($$2,w," ");l=n-i;for(j=1;j<=m;j++){l-=length(w[j])+1;if(l<= 0){l=n-i-length(w[j])-1;printf"\n%*s ",-i," ";}printf"%s ",w[j];}printf"\n";}'

-include .restic.vars
export
.restic.vars:
	@echo "# Auto-generated by Makefile, DO NOT EDIT" > $@
	@echo RESTIC_AWS_SECRET_ACCESS_KEY = $$(cat /keybase/team/epfl_wp_prod/aws-cli-credentials | grep -A4 '\[backup-wwp\]' | grep aws_secret_access_key | sed 's/aws_secret_access_key = //') >> $@
	@echo RESTIC_AWS_ACCESS_KEY_ID = $$(cat /keybase/team/epfl_wp_prod/aws-cli-credentials | grep -A3 '\[backup-wwp\]' | grep aws_access_key_id | sed 's/aws_access_key_id = //') >> $@
	@echo RESTIC_PASSWORD = $$(cat /keybase/team/epfl_wp_prod/aws-cli-credentials | grep -A4 '\[backup-wwp\]' | grep restic_password | sed 's/restic_password = //') >> $@
	@echo RESTIC_BUCKET_NAME = $$(cat /keybase/team/epfl_wp_prod/aws-cli-credentials | grep -A4 '\[backup-wwp\]' | grep bucket_name | sed 's/bucket_name = //') >> $@

.PHONY: aws_secret
## Export AWS_SECRET_ACCESS_KEY and AWS_SECRET_ACCESS_KEY from .env
aws_secret:
	echo AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
	echo AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

.PHONY: test
## Test aws-cli with account list-regions
test:
	aws account list-regions --no-cli-pager

# https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/run-instances.html
## Create the Amazon Elastic Compute Cloud (EC2) instance
create_EC2:
	@aws ec2 run-instances \
		--region ${AWS_REGION} \
		--image-id ${AWS_EC2_IMAGE_ID} \
		--count 1 \
		--instance-type ${AWS_EC2_INSTANCE_TYPE} \
		--key-name ${AWS_EC2_KEY_NAME} \
		--security-group-ids ${AWS_EC2_SECURITY_GROUP_IDS} \
		--subnet-id ${AWS_EC2_SUBNET_ID} \
		--tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value="EWS2AWSv1"}]' \
		--user-data file://Prerequis_installation.txt \
		--output json \
		--no-cli-pager \
		> CREATE_INSTANCE_OUTPUT.json

	@INSTANCE_ID=$(shell cat CREATE_INSTANCE_OUTPUT.json | jq -r '.Instances[].InstanceId'); \
	if [ -n "$${INSTANCE_ID}" ]; then \
		echo "Instance $${INSTANCE_ID} have been created."; \
		echo INSTANCE_ID=$${INSTANCE_ID} >> .env; \
	else \
		echo "Instance not created, something is wrong!"; \
	fi;

# https://docs.aws.amazon.com/cli/latest/reference/ec2/terminate-instances.html
## Terminate instance based on the .env
delete_EC2:
ifndef INSTANCE_ID
	@echo "INSTANCE_ID environment variable missing"
	exit 1
endif

	@aws ec2 terminate-instances \
		--output json \
		--no-cli-pager \
		--instance-ids $(INSTANCE_ID) \
		> DELETE_INSTANCE_OUTPUT.json

	#cat DELETE_INSTANCE_OUTPUT.json

	@CURRENT=$(shell cat DELETE_INSTANCE_OUTPUT.json | jq -r '.TerminatingInstances[].CurrentState.Name'); \
	PREVIOUS=$(shell cat DELETE_INSTANCE_OUTPUT.json | jq -r '.TerminatingInstances[].PreviousState.Name'); \
	echo "Running status current: $${CURRENT} vs previous: $${PREVIOUS}"; \
	read -p 'Voulez-vous supprimer la ligne dans le .env ? [y/N]' ans; \
	ans=$${ans:-N}; \
	if [ $${ans} = y ] || [ $${ans} = Y ]; then \
		grep -v "$(INSTANCE_ID)" .env > temp && mv temp .env; \
		echo "L'identifiant de l'instance n'est plus dans le fichier .env" ; \
	fi

EC2:
	$(eval INSTANCE_ID := $(shell aws ec2 run-instances \
		--region eu-central-2 \
		--image-id ami-0012c4a50d44fc78a \
		--count 1 \
		--instance-type t3.micro \
		--key-name "epflWP" \
		--security-group-ids sg-0f49502b10d5c3ec0 sg-03c3d5996d33bbff0 \
		--subnet-id subnet-0b627edec6cc82546 \
		--tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value="EWS2AWSv1"}]' \
		--user-data file://Prerequis_installation.txt | awk '/InstanceId/{print $2}') | sed 's/InstanceId: \([^,]*\),/\1/')
	@echo INSTANCE_ID=$(INSTANCE_ID) >> .env
	@echo "L'instance est crée avec l'id $(INSTANCE_ID)"

# https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/allocate-address.html
## Allocates an Elastic IP address to Amazon Web Services account
IP_Static:
	$(eval allocation-id := $(shell aws ec2 allocate-address \
		--region eu-central-2 \
		--domain vpc-0d8ad0bf75015308c | awk '/allocation-id/{print $2}') | sed 's/allocation-id: \([^,]*\),/\1/')
	@echo INSTANCE_ID=$(allocation-id) >> .env
	@echo L'instance est crée avec l'id $(allocation-id)

# https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/associate-address.html
## Associates an Elastic IP address with our instance
associate-IP:
	aws ec2 associate-address \
		--region eu-central-2 \
		--instance-id $(INSTANCE_ID) \
		--allocation-id eipalloc-0887dd86e6eabd00a

# https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/create-db-instance.html
## Creates a Amazon Relational Database Service (RDS) instance
create_DB:
	aws rds create-db-instance \
		--db-instance-identifier dbEWS2AWS \
		--db-instance-class db.t3.micro \
		--engine MariaDB \
		--master-username admin \
		--master-user-password 12345678 \
		--region eu-central-2 \
		--vpc-security-group-ids sg-0f49502b10d5c3ec0 sg-05f915ac5b05eae54 \
		--allocated-storage 20 

Creation_DB:
	aws rds create-db-instance \
		--db-instance-identifier dbEWS2AWS \
		--db-instance-class db.t3.micro \
		--engine MariaDB \
		--master-username admin \
		--master-user-password 12345678 \
		--region eu-central-2 \
		--vpc-security-group-ids sg-0f49502b10d5c3ec0 sg-05f915ac5b05eae54 \
		--allocated-storage 20 

## Download each latest "files" and "sql" backups of $SITES_LIST from S3 locally
Restor_backup_local:
	# You have to be in the EPFL network (either on site or with VPN).
	# You have to have the keybase filesystem mounted and access to /keybase/team/epfl_wp_prod
	export AWS_SECRET_ACCESS_KEY=${RESTIC_AWS_SECRET_ACCESS_KEY}; \
	export AWS_ACCESS_KEY_ID=${RESTIC_AWS_ACCESS_KEY_ID}; \
	export RESTIC_PASSWORD=${RESTIC_PASSWORD}; \
	export BUCKET_NAME=${RESTIC_BUCKET_NAME}; \
	mkdir -p ${RESTOR_PATH}; \
	for i in ${SITES_LIST}; do \
		echo "Attempt to restore $${i} in ${RESTOR_PATH}/$${i}. It might take a while..."; \
		mkdir -p ${RESTOR_PATH}/$${i}; \
		restic -r s3:https://s3.epfl.ch/$${BUCKET_NAME}/backup/wordpresses/$${i}/files restore latest --target ${RESTOR_PATH}/$${i}; \
		restic -r s3:https://s3.epfl.ch/$${BUCKET_NAME}/backup/wordpresses/$${i}/sql restore latest --target ${RESTOR_PATH}/$${i}; \
		echo "---"; \
	done

.PHONY: clean
clean:
	rm -f .restic.vars {CREATE,DELETE}_INSTANCE_OUTPUT.json
